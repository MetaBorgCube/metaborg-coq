module Vernacular

imports 
  Lexical
  Gallina
  Options
  extensions/Record
  extensions/Section
  extensions/Module
  extensions/Coercion
  tactic/Toplevel
 
templates
 
  AssumptionKeyword.AssumptionAxiom      = <Axiom> 
  AssumptionKeyword.AssumptionConjecture = <Conjecture>
  AssumptionKeyword.AssumptionParameter  = <Parameter>
  AssumptionKeyword.AssumptionParameters = <Parameters>
  AssumptionKeyword.AssumptionVariable   = <Variable>
  AssumptionKeyword.AssumptionVariables  = <Variables>
  AssumptionKeyword.AssumptionHypothesis = <Hypothesis>
  AssumptionKeyword.AssumptionHypotheses = <Hypotheses>

templates

  AssertionKeyword.AssertionTheorem     = <Theorem>
  AssertionKeyword.AssertionLemma       = <Lemma>
  AssertionKeyword.AssertionRemark      = <Remark>
  AssertionKeyword.AssertionFact        = <Fact>
  AssertionKeyword.AssertionCorollary   = <Corollary>
  AssertionKeyword.AssertionProposition = <Proposition>
  AssertionKeyword.AssertionDefinition  = <Definition>
  AssertionKeyword.AssertionExample     = <Example>
  
syntax

  <AssumptionKeyword-CF> -> <Reserved-LEX> 
  <AssertionKeyword-CF> -> <Reserved-LEX>

templates // Figure 1.3 Syntax of sentences

  Sentence = <<Assumption>>
  Sentence = <<Definition>>
  Sentence = <<Inductive>>
  Sentence = <<Fixpoint>>
  Sentence.AssertionProof = <<Assertion> <Proof>>
  
templates // Assumptions
      
  Assumption.Assumption  = <<AssumptionKeyword> <Assums>.> 
         
  Assums.Term  = <<Ident+> : <Term>>
  Assums.Terms = <<AssumsPar+>>
  
  AssumsPar.Pars = <(<Ident+> : <Term>)> 
  
templates // Definitions

  Definition.Definition = <
  Definition <Ident><OptBinders><OptType> := 
  <Term>
  .
  >

  Definition.Let = <
  Let <Ident><OptBinders><OptType> := 
  <Term>.
  >

templates // Inductive definitions
  
  Inductive.Inductive    = <
  Inductive <IndBody+; separator = "with ">.
  >
  
  Inductive.CoInductive  = <
  CoInductive <IndBody+; separator = "with ">.
  >
  
  IndBody.Induc = <
  <Ident><OptBinders> : <Term> :=
  <ConsDecls>
  >
    
  ConsDecls.ListDeclBar =  <| <ConsDecl+; separator = "| ">>   
  ConsDecls.ListDecl =  <<ConsDecl+; separator = "| ">>   

  ConsDecl.ConsDecl =  <
  <Ident><OptBinders><OptType>
  
  >
  
templates // Fixpoints
  
  Fixpoint.Fixpoint   = <
  Fixpoint
    <FixBody+; separator = "\n with">.
  >
  
  Fixpoint.CoFixpoint = <
  CoFixpoint
    <CoFixBody+; separator = "\n with">.
  >

templates // Assertions

  Assertion.Assertion = <<AssertionKeyword> <Ident><OptBinders> : <Term>.>

templates // Proofs
  Proof.Qed      = <Proof. <Tactic+> Qed.>
  Proof.Defined  = <Proof. <Tactic+> Defined.>
  Proof.Admitted = <Proof. <Tactic+> Admitted.>

template options

  tokenize: "."

