module Vernacular

imports 
  Lexical
  Gallina
  Options
  extensions/Record
  extensions/Section
  extensions/Module
  extensions/Coercion
  tactic/Toplevel

context-free syntax
 
  AssumptionKeyword.AssumptionAxiom      = <Axiom> 
  AssumptionKeyword.AssumptionConjecture = <Conjecture>
  AssumptionKeyword.AssumptionParameter  = <Parameter>
  AssumptionKeyword.AssumptionParameters = <Parameters>
  AssumptionKeyword.AssumptionVariable   = <Variable>
  AssumptionKeyword.AssumptionVariables  = <Variables>
  AssumptionKeyword.AssumptionHypothesis = <Hypothesis>
  AssumptionKeyword.AssumptionHypotheses = <Hypotheses>
  
lexical syntax

  Reserved = "Axiom"
  Reserved = "Conjecture"
  Reserved = "Parameter"
  Reserved = "Parameters"
  Reserved = "Variable"
  Reserved = "Variables"
  Reserved = "Hypothesis"
  Reserved = "Hypotheses"

context-free syntax

  AssertionKeyword.AssertionTheorem     = <Theorem>
  AssertionKeyword.AssertionLemma       = <Lemma>
  AssertionKeyword.AssertionRemark      = <Remark>
  AssertionKeyword.AssertionFact        = <Fact>
  AssertionKeyword.AssertionCorollary   = <Corollary>
  AssertionKeyword.AssertionProposition = <Proposition>
  AssertionKeyword.AssertionDefinition  = <Definition>
  AssertionKeyword.AssertionExample     = <Example>

lexical syntax

  Reserved = "Theorem"
  Reserved = "Lemma"
  Reserved = "Remark"
  Reserved = "Fact"
  Reserved = "Corollary"
  Reserved = "Proposition"
  Reserved = "Definition"
  Reserved = "Example"

context-free syntax // Figure 1.3 Syntax of sentences

  Sentence = <<Assumption>>
  Sentence = <<Definition>>
  Sentence = <<Inductive>>
  Sentence = <<Fixpoint>>
  Sentence.AssertionProof = <<Assertion> <Proof>>
  
context-free syntax // Assumptions

  Assumption.Assumption  = <<AssumptionKeyword> <Assums>.> 
         
  Assums.Term  = <<Ident+> : <Term>>
  Assums.Terms = <<AssumsPar+>>
  
  AssumsPar.Pars = <(<Ident+> : <Term>)> 
  
context-free syntax // Definitions

  Definition.Definition = <
  Definition <Ident><OptBinders><OptType> := 
  <Term>
  .
  >

  Definition.Let = <
  Let <Ident><OptBinders><OptType> := 
  <Term>.
  >

context-free syntax // Inductive definitions
  
  Inductive.Inductive    = <
  Inductive <{IndBody "with "}+>.
  >
  
  Inductive.CoInductive  = <
  CoInductive <{IndBody "with "}+>.
  >
  
  IndBody.Induc = <
  <Ident><OptBinders> : <Term> :=
  <ConsDecls>
  >

  ConsDecls.ListDeclBar =  <| <{ConsDecl "| "}+>>
  ConsDecls.ListDecl    =  <<{ConsDecl "| "}+>>
  ConsDecls.None        =  <
  
  >

  ConsDecl.ConsDecl =  <
  <Ident><OptBinders><OptType>
  
  >
  
context-free syntax // Fixpoints
  
  Fixpoint.Fixpoint   = <
  Fixpoint
    <{FixBody "\n with"}+>.
  >
  
  Fixpoint.CoFixpoint = <
  CoFixpoint
    <{CoFixBody "\n with"}+>.
  >

context-free syntax // Assertions

  Assertion.Assertion = <<AssertionKeyword> <Ident><OptBinders> : <Term>.>

context-free syntax // Proofs
  Proof.Qed      = <Proof. <Tactic+> Qed.>
  Proof.Defined  = <Proof. <Tactic+> Defined.>
  Proof.Admitted = <Proof. <Tactic+> Admitted.>

template options

  tokenize: "."
