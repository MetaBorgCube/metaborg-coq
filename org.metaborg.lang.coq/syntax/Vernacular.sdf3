module Vernacular

imports 

  Lexical
  Gallina
 
lexical syntax
 
  AssumptionKeyword = "Axiom" 
  AssumptionKeyword = "Conjecture"
  AssumptionKeyword = "Parameter"
  AssumptionKeyword = "Parameters"
  AssumptionKeyword = "Variable"
  AssumptionKeyword = "Variables"
  AssumptionKeyword = "Hypothesis"
  AssumptionKeyword = "Hypotheses"
  
  AssertionKeyword = "Theorem"
  AssertionKeyword = "Lemma"
  AssertionKeyword = "Remark"
  AssertionKeyword = "Fact"
  AssertionKeyword = "Corollary"
  AssertionKeyword = "Proposition"
  AssertionKeyword = "Definition"
  AssertionKeyword = "Example"

templates 

  CoqFile.Sent = <<Sentence*; separator="\n\n">> 

templates // Figure 1.3 Syntax of sentences

  Sentence.Assumption     = <<Assumption>>
  Sentence.Definition     = <<Definition>>
  Sentence.Inductive      = <<Inductive>>
  Sentence.Fixpoint       = <<Fixpoint>>
  Sentence.AssertionProof = <<Assertion> <Proof>>
  
templates // Assumptions
      
  Assumption.Assuption  = <<AssumptionKeyword> <Assums>.> 
         
  Assums.Term  = <<Ident+> : <Term>>
  Assums.Terms = <<AssumsPar+>>
  
  AssumsPar.Pars = <(<Ident+> : <Term>)> 
  
templates // Definitions

  Definition.Def = <
  Definition <Ident><OptBinders><OptType> := 
  <Term>
  .
  >

  Definition.Let = <
  Let <Ident><OptBinders><OptType> := 
  <Term>.
  >

templates // Inductive definitions
  
  Inductive.Ind    = <
  Inductive <IndBody+; separator = "with ">.
  >
  
  Inductive.CoInd  = <
  CoInductive <IndBody+; separator = "with ">.
  >
  
  // FIXME: Type is not optional in IndBody, but Coq seems to support it.
  IndBody.Induc = <
  <Ident><OptBinders><OptType> :=
  <ConsDecls>
  >
    
  ConsDecls.ListDeclBar =  <| <ConsDecl+; separator = "| ">>   
  ConsDecls.ListDecl =  <<ConsDecl+; separator = "| ">>   

  ConsDecl.ConsDecl =  <
  <Ident><OptBinders><OptType>
  
  >
  
templates // Fixpoints
  
  Fixpoint.Fixpoint   = <
  Fixpoint
    <FixBody+; separator = "\n with">.
  >
  
  Fixpoint.CoFixpoint = <
  CoFixpoint
    <CoFixBody+; separator = "\n with">.
  >

templates // Assertions

  Assertion.Assertion = <<AssertionKeyword> <Ident><OptBinders> : <Term>.>

templates // Proofs
// TODO: Require the definition of tactics.
  // Proof.Qed      = <Proof. <Tactic+> Qed.>
  // Proof.Defined  = <Proof. <Tactic+> Defined.>
  // Proof.Admitted = <Proof. <Tactic+> Admitted.>
    Proof.Admitted = <Proof. Admitted.>

template options

  tokenize: "."

