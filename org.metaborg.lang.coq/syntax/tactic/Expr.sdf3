module tactic/Expr

imports
  Lexical
  Gallina
  Qid
  Options
  tactic/AtomicTactic

context-free syntax

  TExpr.ExprSeq     = <<TExpr>; <TExpr>> {left}
  TExpr.ExprSeqAlts = <<TExpr>; [<{TExpr " | "}*>]>
  TExpr             = <<TacExpr3>>

context-free syntax

  TacExpr3.DoTac    = <do<OptTime> <TacExpr3>>
  TacExpr3.Progress = <progress <TacExpr3>>
  TacExpr3.Repeat   = <repeat <TacExpr3>>
  TacExpr3.Try      = <try <TacExpr3>>
  TacExpr3.Timeout  = <timeout<OptTime> <TacExpr3>>
  TacExpr3          = <<TacExpr2>>

context-free syntax

  OptTime.None = <>
  OptTime.Natural = <<Num> >
  OptTime         = <<Ident> >

context-free syntax

  TacExpr2.Alts = <<TacExpr1> || <TacExpr3>>
  TacExpr2      = <<TacExpr1>>

context-free syntax

  TacExpr1.Fun           = [fun [Ident+] => [TAtom]]
  TacExpr1.LetTac        = <let<OptRec> <{LetClause " with"}+> in <TAtom>> 
  TacExpr1.MatchGoal     = <match goal with <{ContextRule " |"}+> end> 
  TacExpr1.MatchRevGoal  = <match reverse goal with <{ContextRule " |"}+> end> 
  TacExpr1.MatchExpr     = <match <TExpr> with <{MatchRule " |"}+> end> 
  TacExpr1.LMatchGoal    = <lazymatch goal with <{ContextRule " |"}+> end> 
  TacExpr1.LMatchRevGoal = <lazymatch reverse goal with <{ContextRule " |"}+> end> 
  TacExpr1.LMatchExpr    = <lazymatch <TExpr> with <{MatchRule " |"}+> end> 
  TacExpr1.Abstract      = <abstract <TAtom>>
  TacExpr1.AbstractUsing = <abstract <TAtom> using <Ident>>
  TacExpr1.First         = <first [ <{TExpr " |"}+> ]>
  TacExpr1.Solve         = <solve [ <{TExpr " |"}+> ]>
  TacExpr1.IdTac         = <idtac <MsgToken*>>
  TacExpr1.Fail          = <fail<OptNatural><OptMsgTokens>>
  TacExpr1.Fresh         = <fresh<OptString>>
  TacExpr1.Context       = <context <Ident><OptTerm>>
  TacExpr1.Eval          = <eval <RedExpr> in <Term>>
  TacExpr1.TypeOf        = <type of <Term>>
  TacExpr1.External      = <external <String> <String> <TacArg+>>
  TacExpr1.ConstrTerm    = <constr : <Term>>
  TacExpr1               = <<AtomicTactic>>
  TacExpr1.QualTactic    = <<QualId> <TacArg+>>
  TacExpr1               = <<TAtom>>
  TacExpr1               = <(<TExpr>)> {bracket}

context-free syntax // Options
  
  OptRec.None = <>
  OptRec.Rec  = < rec>

  OptMsgTokens.None = <>
  OptMsgTokens      = < <MsgToken+>>
  
  OptNatural.None = <>
  OptNatural      = <<Num>>
  
  OptString.None = <>
  OptString      = <<Num>>
  
  OptTerm.None = <>
  OptTerm      = <<Term>>
  
context-free syntax

	TAtom      = <<QualId>>
	TAtom      = <<Num>>
	TAtom      = <(TExpr)> {bracket}
  TAtom.Unit = <()>

template options

  tokenize: "()"

context-free syntax

  MsgToken = <<String>>
  MsgToken = <<Ident>>
  MsgToken = <<Num>>

context-free syntax

  TacArg         = <<QualId>>
  TacArg.Unit    = <()>
  TacArg.AtomArg = <ltac : <TAtom>>
  TacArg         = <<Term>>

context-free syntax

  LetClause.LetClause = <<Ident><OptNames> := <TExpr>>
  OptNames.None = <>
  OptNames      = < <Name+>>
  
context-free syntax

  ContextRule.PatContext = [[OptContextHyps]|- [Pattern] => [TExpr]]
  ContextRule.WldContext = [_ => [TExpr]]
  
  OptContextHyps.None = <>
  OptContextHyps      = <<{ContextHyp ", "}+> >

context-free syntax

  ContextHyp.ContextHyp       = <<Name> : <Pattern>>
  ContextHyp.ContextHypAssign = <<Name> := <Pattern><OptCPattern>>
  
  OptCPattern.None        = <>
  OptCPattern.OptCPattern = < : <Pattern>>

context-free syntax

  MatchRule.MatchPattern    = [[Pattern] => [TExpr]]
  MatchRule.MatchContext    = [context[OptIdent][OptPattern] => [TExpr]]
  MatchRule.MatchAppContext = [appcontext[OptIdent][OptPattern] => [TExpr]]
  MatchRule.MatchWld        = [_ => [TExpr]]
  
  OptIdent.None = <>
  OptIdent      = < <Ident>>
  
  OptPattern.None = <>
  OptPattern      = < <Pattern>>
  
context-free syntax

  RedExpr.RedRed     = <red>
  RedExpr.RedHnf     = <hnf>
  RedExpr.RedCompute = <compute>
  RedExpr.RedSimpl   = <simpl>
  RedExpr.RedCbv     = <cbv>
  RedExpr.RedLazy    = <lazy>
  RedExpr.RedUnfold  = <unfold>
  RedExpr.RedFold    = <fold>
  RedExpr.RedPattern = <pattern>