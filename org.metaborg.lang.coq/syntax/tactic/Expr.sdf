module tactic/Expr
imports Lexical Gallina Qid Options tactic/AtomicTactic

exports
  context-free syntax
    TExpr ";" TExpr                -> TExpr {cons("ExprSeq"), left}
    TExpr ";" "[" {TExpr "|"}* "]" -> TExpr {cons("ExprSeqAlts")}
    TacExpr3                       -> TExpr 

  context-free syntax
    CONTENTCOMPLETE -> TExpr {cons("COMPLETION-TExpr")}

  context-free syntax
    "do" OptTime TacExpr3      -> TacExpr3 {cons("DoTac")}
    "progress" TacExpr3        -> TacExpr3 {cons("Progress")}
    "repeat" TacExpr3          -> TacExpr3 {cons("Repeat")}
    "try" TacExpr3             -> TacExpr3 {cons("Try")}
    "timeout" OptTime TacExpr3 -> TacExpr3 {cons("Timeout")}
    TacExpr2                   -> TacExpr3 

  context-free syntax
    CONTENTCOMPLETE -> TacExpr3 {cons("COMPLETION-TacExpr3")}

  context-free syntax
          -> OptTime {cons("None")}
    Num   -> OptTime {cons("Natural")}
    Ident -> OptTime 

  context-free syntax
    CONTENTCOMPLETE -> OptTime {cons("COMPLETION-OptTime")}

  context-free syntax
    TacExpr1 "||" TacExpr3 -> TacExpr2 {cons("Alts")}
    TacExpr1               -> TacExpr2 

  context-free syntax
    CONTENTCOMPLETE -> TacExpr2 {cons("COMPLETION-TacExpr2")}

  context-free syntax
    "fun" Ident+ "=>" TAtom                                      -> TacExpr1 {cons("Fun")}
    "let" OptRec {LetClause "with"}+ "in" TAtom                  -> TacExpr1 {cons("LetTac")}
    "match" "goal" "with" {ContextRule "|"}+ "end"               -> TacExpr1 {cons("MatchGoal")}
    "match" "reverse" "goal" "with" {ContextRule "|"}+ "end"     -> TacExpr1 {cons("MatchRevGoal")}
    "match" TExpr "with" {MatchRule "|"}+ "end"                  -> TacExpr1 {cons("MatchExpr")}
    "lazymatch" "goal" "with" {ContextRule "|"}+ "end"           -> TacExpr1 {cons("LMatchGoal")}
    "lazymatch" "reverse" "goal" "with" {ContextRule "|"}+ "end" -> TacExpr1 {cons("LMatchRevGoal")}
    "lazymatch" TExpr "with" {MatchRule "|"}+ "end"              -> TacExpr1 {cons("LMatchExpr")}
    "abstract" TAtom                                             -> TacExpr1 {cons("Abstract")}
    "abstract" TAtom "using" Ident                               -> TacExpr1 {cons("AbstractUsing")}
    "first" "[" {TExpr "|"}+ "]"                                 -> TacExpr1 {cons("First")}
    "solve" "[" {TExpr "|"}+ "]"                                 -> TacExpr1 {cons("Solve")}
    "idtac" MsgToken*                                            -> TacExpr1 {cons("IdTac")}
    "fail" OptNatural OptMsgTokens                               -> TacExpr1 {cons("Fail")}
    "fresh" OptString                                            -> TacExpr1 {cons("Fresh")}
    "context" Ident OptTerm                                      -> TacExpr1 {cons("Context")}
    "eval" RedExpr "in" Term                                     -> TacExpr1 {cons("Eval")}
    "type" "of" Term                                             -> TacExpr1 {cons("TypeOf")}
    "external" String String TacArg+                             -> TacExpr1 {cons("External")}
    "constr" ":" Term                                            -> TacExpr1 {cons("ConstrTerm")}
    AtomicTactic                                                 -> TacExpr1 
    QualId TacArg+                                               -> TacExpr1 {cons("QualTactic")}
    TAtom                                                        -> TacExpr1 
    "(" TExpr ")"                                                -> TacExpr1 {bracket}

  context-free syntax
    CONTENTCOMPLETE -> TacExpr1 {cons("COMPLETION-TacExpr1")}

  context-free syntax
              -> OptRec       {cons("None")}
    "rec"     -> OptRec       {cons("Rec")}
              -> OptMsgTokens {cons("None")}
    MsgToken+ -> OptMsgTokens 
              -> OptNatural   {cons("None")}
    Num       -> OptNatural   
              -> OptString    {cons("None")}
    Num       -> OptString    
              -> OptTerm      {cons("None")}
    Term      -> OptTerm      

  context-free syntax
    CONTENTCOMPLETE -> OptRec       {cons("COMPLETION-OptRec")}
    CONTENTCOMPLETE -> OptMsgTokens {cons("COMPLETION-OptMsgTokens")}
    CONTENTCOMPLETE -> OptNatural   {cons("COMPLETION-OptNatural")}
    CONTENTCOMPLETE -> OptString    {cons("COMPLETION-OptString")}
    CONTENTCOMPLETE -> OptTerm      {cons("COMPLETION-OptTerm")}

  context-free syntax
    QualId          -> TAtom 
    Num             -> TAtom 
    "(" "TExpr" ")" -> TAtom {bracket}
    "()"            -> TAtom {cons("Unit")}

  context-free syntax
    CONTENTCOMPLETE -> TAtom {cons("COMPLETION-TAtom")}

  context-free syntax
    String -> MsgToken 
    Ident  -> MsgToken 
    Num    -> MsgToken 

  context-free syntax
    CONTENTCOMPLETE -> MsgToken {cons("COMPLETION-MsgToken")}

  context-free syntax
    QualId           -> TacArg 
    "()"             -> TacArg {cons("Unit")}
    "ltac" ":" TAtom -> TacArg {cons("AtomArg")}
    Term             -> TacArg 

  context-free syntax
    CONTENTCOMPLETE -> TacArg {cons("COMPLETION-TacArg")}

  context-free syntax
    Ident OptNames ":=" TExpr -> LetClause {cons("LetClause")}
                              -> OptNames  {cons("None")}
    Name+                     -> OptNames  

  context-free syntax
    CONTENTCOMPLETE -> LetClause {cons("COMPLETION-LetClause")}
    CONTENTCOMPLETE -> OptNames  {cons("COMPLETION-OptNames")}

  context-free syntax
    OptContextHyps "|-" Pattern "=>" TExpr -> ContextRule    {cons("PatContext")}
    "_" "=>" TExpr                         -> ContextRule    {cons("WldContext")}
                                           -> OptContextHyps {cons("None")}
    {ContextHyp ","}+                      -> OptContextHyps 

  context-free syntax
    CONTENTCOMPLETE -> ContextRule    {cons("COMPLETION-ContextRule")}
    CONTENTCOMPLETE -> OptContextHyps {cons("COMPLETION-OptContextHyps")}

  context-free syntax
    Name ":" Pattern              -> ContextHyp  {cons("ContextHyp")}
    Name ":=" Pattern OptCPattern -> ContextHyp  {cons("ContextHypAssign")}
                                  -> OptCPattern {cons("None")}
    ":" Pattern                   -> OptCPattern {cons("OptCPattern")}

  context-free syntax
    CONTENTCOMPLETE -> ContextHyp  {cons("COMPLETION-ContextHyp")}
    CONTENTCOMPLETE -> OptCPattern {cons("COMPLETION-OptCPattern")}

  context-free syntax
    Pattern "=>" TExpr                          -> MatchRule  {cons("MatchPattern")}
    "context" OptIdent OptPattern "=>" TExpr    -> MatchRule  {cons("MatchContext")}
    "appcontext" OptIdent OptPattern "=>" TExpr -> MatchRule  {cons("MatchAppContext")}
    "_" "=>" TExpr                              -> MatchRule  {cons("MatchWld")}
                                                -> OptIdent   {cons("None")}
    Ident                                       -> OptIdent   
                                                -> OptPattern {cons("None")}
    Pattern                                     -> OptPattern 

  context-free syntax
    CONTENTCOMPLETE -> MatchRule  {cons("COMPLETION-MatchRule")}
    CONTENTCOMPLETE -> OptIdent   {cons("COMPLETION-OptIdent")}
    CONTENTCOMPLETE -> OptPattern {cons("COMPLETION-OptPattern")}

  context-free syntax
    "red"     -> RedExpr {cons("RedRed")}
    "hnf"     -> RedExpr {cons("RedHnf")}
    "compute" -> RedExpr {cons("RedCompute")}
    "simpl"   -> RedExpr {cons("RedSimpl")}
    "cbv"     -> RedExpr {cons("RedCbv")}
    "lazy"    -> RedExpr {cons("RedLazy")}
    "unfold"  -> RedExpr {cons("RedUnfold")}
    "fold"    -> RedExpr {cons("RedFold")}
    "pattern" -> RedExpr {cons("RedPattern")}

  context-free syntax
    CONTENTCOMPLETE -> RedExpr {cons("COMPLETION-RedExpr")}