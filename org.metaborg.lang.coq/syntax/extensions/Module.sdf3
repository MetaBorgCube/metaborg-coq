module extensions/Module

// 2.5 Module system

imports
  Vernacular
  Gallina
  Lexical
  Options
  Qid
  extensions/Section

lexical syntax

  Reserved = "Import"
  Reserved = "Export"
  Reserved = "Include"
  Reserved = "Inline"
  Reserved = "Module"
  Reserved = "End"
  Reserved = "Require"
  Reserved = "Type"

templates // Interactive modules (2.5.1 - 2.5.2)

  Module.InteractiveModule = <
  Module <OptModuleBindingKeywordPrefix><Ident><OptModuleBindings><OptModuleTypes>.
    <ModContent*; separator="\n\n">
  End <Ident>.
  >

templates

  ModuleBindingKeyword.Import = <Import>
  ModuleBindingKeyword.Export = <Export>

  OptModuleBindingKeywordPrefix.None = <>
  OptModuleBindingKeywordPrefix      = <<ModuleBindingKeyword> >
  
templates

  ModuleType.QualifiedModule        = <<QualId>>
  ModuleType.ModuleWithDefinition   = <<ModuleType> with Definition <QualId> := <Term>>
  ModuleType.ModuleWithModule       = <<ModuleType> with Module <QualId> := <QualId>>
  ModuleType.QualifiedModuleSeq     = <<QualId> <QualId+>>
  ModuleType.QualifiedModuleBangSeq = <!<QualId> <QualId+>>
  ModuleType                        = <(<ModuleType>)> {bracket}
  
  OptModuleTypes.None = <>
  OptModuleTypes      = < : <ModuleType>>
  OptModuleTypes      = [ <: [ModuleType*; separator=" <:"]]
  
templates

  ModuleBinding.ModuleBinding = <(<OptModuleBindingKeywordPrefix><Ident+> <ModuleType>)>
  
  OptModuleBindings.None = <>
  OptModuleBindings      = < <ModuleBinding+; separator=" ">>

templates // Encoding elements valid inside modules only

  ModContent         = <<Sentence>>
  ModContent         = <<Module>>
  ModContent.Include = <Include <Ident+; separator=" <+">>
  
templates // Module definition (2.5.3)

  Module.ModuleDef = <
  Module <Ident><OptModuleBindings><OptModuleTypes> := <ModuleExpression>.
  > {prefer}
  Module.ModuleDefs = <
  Module <Ident><OptModuleBindings> := <ModuleExpression+; separator="<+">
  >
  
templates

  ModuleExpression.ModuleExpression     =  <<QualId+>>
  ModuleExpression.ModuleBangExpression = <!<QualId+>>
  
templates // Interactive Module Type definitions (2.5.4 & 2.5.5)

  Module.ModuleType = <
  Module Type <Ident><OptModuleBindings>.
    <ModTypeContent*>
  End <Ident>.
  >
  
templates

  ModTypeContent                  = <<ModContent>>
  ModTypeContent.InlineAssumption = <<AssumptionKeyword> Inline <Assums>>
  
templates // Module type equality (2.5.6)

  Module.ModuleTypeDef = <
  Module Type <Ident><OptModuleBindings> := <ModuleType+; separator=" <+">
  >

templates // Imports (2.5.8)

  Sentence.Import = <<OptRequirePrefix>Import <QualId>.>
  Sentence.Export = <<OptRequirePrefix>Export <QualId>.>
  
templates

  OptRequirePrefix.None = <>
  OptRequirePrefix      = <Require >
