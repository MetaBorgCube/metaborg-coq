<?xml version="1.0" encoding="UTF-8"?>
<project name="Coq" default="all">
  
  <!-- Key input modules -->
  <property name="sdfmodule" value="Coq"/>
  <property name="metasdfmodule" value="Stratego-Coq"/>
  <property name="esvmodule" value="Coq"/>
  <property name="strmodule" value="coq"/>
  <property name="ppmodule" value="Coq-pp" />
  <property name="sigmodule" value="Coq-sig" />

  <!-- Project directories -->
  <property location="trans" name="trans" />
  <property location="editor/java" name="src-gen" />
  <property location="include" name="include" />
  <property location="lib" name="lib" />
  <property location="target/classes" name="build" />
  <property location="bin/dist" name="dist" />
  <property name="sdf-src-gen" location="src-gen" />
  <property name="pp" location="${sdf-src-gen}/pp" />
  <property name="signatures" location="${sdf-src-gen}/signatures" />
  <property name="syntax" location="${sdf-src-gen}/syntax" />
  <property name="lib-gen" location="${include}" />
  <property name="syntax.rel" location="${syntax}" relative="yes" />
  <property name="trans.rel" location="trans" relative="yes" />
  <property name="include.rel" location="${include}" relative="yes" />
  <property name="lib-gen.rel" location="${lib-gen}" relative="yes" />
  
  <!-- Imports -->
  <property name="build.sdf.imports" value="
  	-I &quot;${basedir}/syntax/mix&quot;
  	"/>
  <property name="build.stratego.args" value="
                  --library
                  -I &quot;${trans}&quot;
                  -I &quot;${basedir}&quot;
                  -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -la stratego-parallel"/>
  
  <!-- Optional: external .def and .jar locations
  <property name="externaldef" location="syntax/${sdfmodule}.def"/>
  <property name="externaljar" value="../lib.jar"/>
  <property name="externaljarflags" value="-la org.lib"/>
  -->

  <!-- Environment configuration for command-line builds -->
  <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
      <isset property="eclipse.spoofaximp.nativeprefix"/>
  </condition>
  <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
	<property name="nativepath" value="${eclipse.spoofaximp.nativeprefix}"/>   
		
	<!-- used for building inside of Eclipse -->
  <import file="build.generated.xml"/>   

  <!-- Main target -->
  <target name="all" depends="spoofaximp.default.ctree" />

  <!-- Copy target -->
  <target name="copy-to-project">
  	<!-- <copy overwrite="yes" file="${basedir}/include/Coq-pp.jar"  todir="${basedir}/../../${dstproj}/include/" />
    <unzip src="${basedir}/../../${dstproj}/include/Coq-pp.jar" dest="${basedir}/../../${dstproj}/include/">
    	<patternset>
    	  <include name="**/pplib/Main.rtree" />
    	</patternset>
    </unzip>
  	<move file="${basedir}/../../${dstproj}/include/pplib/Main.rtree" tofile="${basedir}/../../${dstproj}/include/Coq-pp.rtree" />
  	<delete dir="${basedir}/../../${dstproj}/include/pplib/" /> -->
    
  	<!-- Temporary while we don't fix the jar generation. -->
  	<copy overwrite="yes" todir="${basedir}/../../${dstproj}/include/Coq/">
      <fileset dir="${signatures}/../" includes="signatures/**/*.str" />
      <fileset dir="${pp}/../" includes="pp/**/*.str" />
  	  <filterchain>
  	  	<replaceregex pattern="src-gen" replace="include/Coq" flags="gi" />
  	  	<replaceregex pattern="prettyprint-" replace="prettyprintCoq-" flags="gi" />
  	  </filterchain>
  	</copy>
  	<copy overwrite="yes" file="${include}/Coq-parenthesize.str" todir="${basedir}/../../${dstproj}/include/Coq/">
  	  <filterchain>
  	    <replaceregex pattern="module include/Coq-parenthesize" replace = "module include/Coq/Coq-parenthesize" />
  	  	<replaceregex pattern="  include/Coq" replace="  include/Coq/signatures/- include/Coq/signatures/tactic/-" />
	    </filterchain>
	  </copy>
  	
  	<copy overwrite="yes" file="${basedir}/include/Stratego-Coq.def" todir="${basedir}/../../${dstproj}/include/" />
    <copy overwrite="yes" file="${basedir}/include/Stratego-Coq.tbl" todir="${basedir}/../../${dstproj}/include/" />
  </target>
	
  <target name="copy-to-sdf">
    <antcall target="copy-to-project">
      <param name="dstproj" value="sdf/org.strategoxt.imp.editors.template"/>
    </antcall>
  </target>
  <target name="copy-to-ts">
    <antcall target="copy-to-project">
      <param name="dstproj" value="ts/org.metaborg.meta.lang.ts"/>
    </antcall>
  </target>
  <target name="copy-to-nabl">
    <antcall target="copy-to-project">
      <param name="dstproj" value="nabl/org.metaborg.meta.lang.nabl"/>
    </antcall>
  </target>
	<target name="copy-to-dynsem">
	  <antcall target="copy-to-project">
	    <param name="dstproj" value="dynsem/dynsem"/>
    </antcall>
  </target>
	
	<target name="copy-to-all" depends="copy-to-sdf, copy-to-ts, copy-to-nabl, copy-to-dynsem" />
	
  <!-- Target to create jar from generated pp and signatures, shamelessly copied from the SDF project -->
  <target name="coq-pp.jar" depends="utils-files">
    <available file="${pp}/${ppmodule}.str" property="pp.module.enabled" />
    <fail message="Main pp file '${ppmodule}.str' not found.">
      <condition>
        <not>
          <isset property="pp.module.enabled" />
        </not>
      </condition>
    </fail>
    
    <available file="${src-gen}/pplib/Main.java" property="pp-java.available" />
    <antcall target="pp.jar.deletehelper" />
    
  	<!-- Copying files so we can rename the strategies properly. (TODO) -->
    <copy overwrite="yes" todir="${pack.tmp.loc}/pp">
      <fileset dir="${pp}">
        <include name="**/*.str" />
      </fileset>
      <filterchain>
        <replaceregex pattern="src-gen" replace="src-gen/${pack.tmp}" flags="gi"/>
        <replaceregex pattern="prettyprint-" replace="prettyprint${language}-" flags="gi"/>
      </filterchain>
    </copy>
    <copy overwrite="yes" todir="${pack.tmp.loc}/signatures">
      <fileset dir="${signatures}">
        <include name="**/*.str" />
      </fileset>
      <filterchain>
        <replaceregex pattern="src-gen" replace="src-gen/${pack.tmp}" flags="gi"/>
      </filterchain>
    </copy>
    <copy overwrite="yes" file="${include}/${language}-parenthesize.str" todir="${pack.tmp.loc}">
      <filterchain>
        <replaceregex pattern="module include/${language}-parenthesize" replace = "module ${pack.tmp}/${language}-parenthesize" />
      </filterchain>
    </copy>
  	<echo file="${pack.tmp.loc}/Main.str">
module ${pack.tmp}/Main
imports
  	  src-gen/${pack.tmp}/-
  		src-gen/${pack.tmp}/pp/-
  		src-gen/${pack.tmp}/signatures/-

  		strategies
  		ignore = parenthesize-Coq
  	
      ignore2 = prettyprintCoq-Start
  	</echo>
  	
    <strj input="${pack.tmp.loc}/Main.str" output="${src-gen}/pplib/Main.java" package="pplib">
      <strjargs> 
        <arg value="--clean" />
        <!-- arg line="${build.stratego.args}" / -->
        <arg line="${externaljarflags}" />
        <!-- arg line="${externaldefimport}" / -->
        <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
        <arg line="--library -I &quot;${trans}&quot; -I &quot;${basedir}&quot; -la stratego-lib -la stratego-gpp" />
      </strjargs>
      <str-deps>
        <srcfiles dir="${pack.tmp.loc}"  includes="**/*.str" />
      </str-deps>
    </strj>
  	<mkdir dir="${build}/pplib" />
    
    <sequential>
      <uptodate-mio input="${src-gen}/pplib/Main.java" output="${include}/${ppmodule}.jar" type="javac">
        <action>
          <javac srcdir="${src-gen}" includes="pplib/**" destdir="${build}" source="1.7" target="1.7" debug="on">
            <classpath>
              <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" />
            </classpath>
          </javac>
          <!-- copy imported terms -->
          <copy todir="${build}/pplib">
            <fileset dir="${src-gen}/pplib" excludes="**/*.java" />
            <!-- filterchain>
              <replaceregex pattern='ExtSDef\("(pp-one|pp-option).*\),ExtSDef' replace="ExtSDef" flags="gi"/>
            </filterchain -->
          </copy>
          <!--copy file="${src-gen}/pplib/Main.rtree" tofile="${pp}/${ppmodule}.rtree" /-->
          <jar basedir="${build}" includes="pplib/**" destfile="${include}/${ppmodule}.tmp.jar"
          excludes="pplib/pp_one*|pplib/pp_option*" />
          <move file="${include}/${ppmodule}.tmp.jar" tofile="${include}/${ppmodule}.jar" />
        	<delete>
        	  <fileset dir="${build}" includes="pplib/**" />
        	</delete>
        </action>
        <deps>
          <srcfiles dir="${src-gen}/pplib/" includes="**/*.java" />
        </deps>
      </uptodate-mio>
    </sequential>  
  </target>

	<taskdef classpath="${eclipse.spoofaximp.strategojar}" resource="org/strategoxt/antcontrib/strategoxt-antlib.xml"/>
	<taskdef classpath="${eclipse.spoofaximp.strategojar}" resource="net/sf/antcontrib/antlib.xml"/>
	
	<target name="pp.jar.deletehelper" unless="pp-java.available">
    <fileset dir="${src-gen}" includes="pplib/**" />
    <fileset dir="${build}"   includes="pplib/**" />
    <!-- fileset dir="${pp}" includes="${ppmodule}.rtree" /-->
  </target>
</project>

